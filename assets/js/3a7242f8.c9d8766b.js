"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[412],{1886:e=>{e.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"/2024/05/29/debugging-methods","metadata":{"permalink":"/my-website/blog/2024/05/29/debugging-methods","editUrl":"https://github.com/lrchljw/my-website/tree/main/blog/2024-05-29-debugging-methods.md","source":"@site/blog/2024-05-29-debugging-methods.md","title":"Debugging Methods","description":"Methods for debugging code","date":"2024-05-29T00:00:00.000Z","tags":[],"readingTime":2.46,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"Debugging Methods"},"unlisted":false,"nextItem":{"title":"My first blog","permalink":"/my-website/blog/2024/05/25/my-first-blog"}},"content":"Methods for debugging code\\n\\n\x3c!-- truncate --\x3e\\n\\n## Try in the following order\\n\\n### 1. Read Through the Code\\n\\n> to understand the logic\\n\\n:::tip\\nWrite comments when reading the code may help you understand the logic better.\\n:::\\n\\n> and to find simple mistakes\\n\\nAsk yourself the following questions when reading each line of code:\\n\\n- Is there any typo such as write `==` as `=`?\\n- When access `array[i]`, is `i` within the bounds of the array?\\n- When access `map[key]`, is `key` present in the map?\\n- When increase/decrease/multiply a variable, will the value exceed the limit? (e.g. overflow) or When divide a variable, will the value be zero? (e.g. divide by zero)\\n\\n### 2a. Manual Simulation\\n\\n> Simulate sample inputs and trace the code manually to check for mistakes.\\n\\nFor example, to simulate the logic of the code below:\\n\\n```js\\n/**\\n * getScore generates 6 random scores that sum up to the totalScore,\\n * and ensures that each score is between 1 and 50.\\n * @param {number} totalScore\\n * @param {number[]} result\\n * @return {number[]}\\n */\\nfunction getScore(totalScore, result) {\\n  if (totalScore == 0) {\\n    return result;\\n  }\\n\\n  var resultLeft = 6 - result.length;\\n  var scoreMax = Math.min(totalScore - (resultLeft - 1) * 1, 50);\\n  var scoreMin = Math.max(totalScore - (resultLeft - 1) * 50, 1);\\n\\n  var randomScore = Math.ceil(Math.random() * (scoreMax - scoreMin)) + scoreMin;\\n  result.push(randomScore);\\n\\n  return getScore(totalScore - randomScore, result);\\n}\\n\\nconsole.log(getScore(200, []));\\n```\\n\\nYou can use a piece of paper and a pen to write down the values of the variables and the results of each step.\\n\\n```csv\\ntotalScore, resultLeft, scoreMin, scoreMax, randomScore, result\\n\\n200,        6,          1,        50,       26,          [26]\\n174,        5,          1,        50,       11,          [26, 11]\\n163,        4,          13,       50,       43,          [26, 11, 43]\\n120,        3,          20,       50,       32,          [26, 11, 43, 32]\\n88,         2,          38,       50,       46,          [26, 11, 43, 32, 46]\\n42,         1,          42,       42,       42,          [26, 11, 43, 32, 46, 42]\\n\\n200,        6,          1,        50,       50,          [50]\\n150,        5,          1,        50,       50,          [50, 50]\\n100,        4,          1,        50,       50,          [50, 50, 50]\\n50,         3,          1,        48,       48,          [50, 50, 50, 48]\\n2,          2,          1,        1,        1,           [50, 50, 50, 48, 1]\\n1,          1,          1,        1,        1,           [50, 50, 50, 48, 1, 1]\\n```\\n\\n### 2b. Print Intermediate Results (Logging)\\n\\n> Insert print statements or log messages in the code to output intermediate results and track down issues.\\n\\n### 3. Step-by-Step Debugging (IDE)\\n\\n:::tip\\nNot recommended, unless you are debugging a complex issue with so many states that manual simulation is not feasible, and logging is too cumbersome.\\n:::\\n\\n## The Best Way to Debug is to Avoid Errors\\n\\n### 1. Static Analysis During Coding\\n\\n> Perform static analysis techniques while writing the code to identify and prevent errors early.\\n\\n### 2. Modularization\\n\\n> Break down the code into smaller functions and modules to make it easier to understand and locate the issue. Many bugs occurs in a single module or function."},{"id":"/2024/05/25/my-first-blog","metadata":{"permalink":"/my-website/blog/2024/05/25/my-first-blog","editUrl":"https://github.com/lrchljw/my-website/tree/main/blog/2024-05-25-my-first-blog.md","source":"@site/blog/2024-05-25-my-first-blog.md","title":"My first blog","description":"Establish a personal document and blog website for me to record and review the knowledge I have learned, otherwise it will be too easy to forget.","date":"2024-05-25T00:00:00.000Z","tags":[],"readingTime":0.25,"hasTruncateMarker":true,"authors":[],"frontMatter":{"title":"My first blog"},"unlisted":false,"prevItem":{"title":"Debugging Methods","permalink":"/my-website/blog/2024/05/29/debugging-methods"}},"content":"Establish a personal document and blog website for me to record and review the knowledge I have learned, otherwise it will be too easy to forget.\\n\\n\x3c!-- truncate --\x3e\\n\\nAnd, may the most important people in my life, my child, my wife, and my parents, be healthy, safe, and happy."}]}}')}}]);